@article{Reference1,
	Abstract = {What is computational modeling? Computational modeling is the use of computers to simulate and study complex systems using mathematics, physics and computer science. A computational model contains numerous variables that characterize the system being studied. Simulation is done by adjusting the variables alone or in combination and observing the outcomes. Computer modeling allows scientists to conduct thousands of simulated experiments by computer. The thousands of computer experiments identify the handful of laboratory experiments that are most likely to solve the problem being studied.Today’s computational models can study a biological system at multiple levels. Models of how disease develops include molecular processes, cell to cell interactions, and how those changes affect tissues and organs. Studying systems at multiple levels is known as multiscale modeling (MSM).},
	Journal = {National Institute of Biomedical Imaging and Bioengineering},
	Month = {May},
	Pages = {1},
	Title = {Computational Modeling},
	Url = {https://www.nibib.nih.gov/science-education/science-topics/computational-modeling},
	Year = {2020}}

@article{Reference2,
	Abstract = {Computational modeling of behavior has revolutionized psychology and neuroscience. By fitting models to experimental data we can probe the algorithms underlying behavior, find neural correlates of computational variables and better understand the effects of drugs, illness and interventions. But with great power comes great responsibility. Here, we offer ten simple rules to ensure that computational modeling is used with care and yields meaningful insights. In particular, we present a beginner-friendly, pragmatic and details-oriented introduction on how to relate models to data. What, exactly, can a model tell us about the mind? To answer this, we apply our rules to the simplest modeling techniques most accessible to beginning modelers and illustrate them with examples and code available online. However, most rules apply to more advanced techniques. Our hope is that by following our guidelines, researchers will avoid many pitfalls and unleash the power of computational modeling on their own data.},
	Author = {Robert C Wilson, Anne GE Collins},
	Journal = {eLife},
	Month = {November},
	Numpages = {1},
	Pages = {1},
	Title = {Ten simple rules for the computational modeling of behavioral data},
	Url = {https://elifesciences.org/articles/49547#content},
	Year = {2019}}

@article{Reference3,
	Abstract = {Covasim is a stochastic agent-based simulator for performing COVID-19 analyses. These include projections of indicators such as numbers of infections and peak hospital demand. Covasim can also be used to explore the potential impact of different interventions, including social distancing, school closures, testing, contact tracing, quarantine, and vaccination.},
	Author = {Kerr CC, Stuart RM, Mistry D, etc.},
	Title = {Covasim},
	Url = {https://github.com/InstituteforDiseaseModeling/covasim},
	Year = {2021}}

@article{Reference4,
	Abstract = {In order to deal with an increasingly complex world, we need ever more sophisticated computational models that can help us make decisions wisely and understand the potential consequences of choices. But creating a model requires far more than just raw data and technical skills: it requires a close collaboration between model commissioners, developers, users and reviewers. Good modelling requires its users and commissioners to understand more about the whole process, including the different kinds of purpose a model can have and the different technical bases. This paper offers a guide to the process of commissioning, developing and deploying models across a wide range of domains from public policy to science and engineering. It provides two checklists to help potential modellers, commissioners and users ensure they have considered the most significant factors that will determine success. We conclude there is a need to reinforce modelling as a discipline, so that misconstruction is less likely; to increase understanding of modelling in all domains, so that the misuse of models is reduced; and to bring commissioners closer to modelling, so that the results are more useful.},
	Author = {Muffy Calder, Claire Craig, etc.},
	Journal = {Royal Society Open Science},
	Month = {June},
	Numpages = {1},
	Title = {Computational modelling for decision-making: where, why, what, who and how},
	Url = {https://royalsocietypublishing.org/doi/10.1098/rsos.172096},
	Year = {2018}}

@article{Reference5,
	Abstract = {The COVID-19 pandemic has created an urgent need for models that can project epidemic trends, explore intervention scenarios, and estimate resource needs. Here we describe the methodology of Covasim (COVID-19 Agent-based Simulator), an open-source model developed to help address these questions. Covasim includes country-specific demographic information on age structure and population size; realistic transmission networks in different social layers, including households, schools, workplaces, long-term care facilities, and communities; age-specific disease outcomes; and intrahost viral dynamics, including viral-load-based transmissibility. Covasim also supports an extensive set of interventions, including non-pharmaceutical interventions, such as physical distancing and protective equipment; pharmaceutical interventions, including vaccination; and testing interventions, such as symptomatic and asymptomatic testing, isolation, contact tracing, and quarantine. These interventions can incorporate the effects of delays, loss-to-follow-up, micro-targeting, and other factors. Implemented in pure Python, Covasim has been designed with equal emphasis on performance, ease of use, and flexibility: realistic and highly customized scenarios can be run on a standard laptop in under a minute. In collaboration with local health agencies and policymakers, Covasim has already been applied to examine epidemic dynamics and inform policy decisions in more than a dozen countries in Africa, Asia-Pacific, Europe, and North America.},
	Author = {Cliff C. Kerr ,Robyn M. Stuart , etc.},
	Journal = {PLOS Computational Biology},
	Month = {July},
	Title = {Covasim: An agent-based model of COVID-19 dynamics and interventions},
	Url = {https://journals.plos.org/ploscompbiol/article?id=10.1371/journal.pcbi.1009149},
	Year = {2018}}

@article{Reference6,
	Abstract = {Scientific software plays an important role in critical decision making, for example making weather predictions based on climate models, and computation of evidence for research publications. Recently, scientists have had to retract publications due to errors caused by software faults. Systematic testing can identify such faults in code.},
	Author = {Upulee Kanewala, James M.Bieman},
	Journal = {ScienceDirect},
	Month = {May},
	Title = {Testing scientific software: A systematic literature review},
	Url = {https://www.sciencedirect.com/science/article/pii/S0950584914001232},
	Year = {2014}}

@article{Reference7,
	Abstract = {The two cultures of the title are those observed in my field studies: the culture of scientists (financial mathematicians, earth and planetary scientists, and molecular biologists) developing their own software, and the culture of software engineers developing scientific software. In this paper, I shall describe some problems arising when scientists and software engineers come together to develop scientific software and discuss how these problems may be ascribed to their two different cultures.},
	Author = {Judith Segal},
	Journal = {Open research Online},
	Number = {1},
	Numpages = {8},
	Pages = {2},
	Title = {Scientists and software engineers: A tale of two cultures},
	Url = {http://oro.open.ac.uk/17671/1/PPIG_08Segal.pdf},
	Year = {2008}}

@article{Reference8,
	Abstract = {Behavior-driven development (or BDD) is an agile software development technique that encourages collaboration between developers, QA and non-technical or business participants in a software project. It was originally named in 2003 by Dan North as a response to test-driven development (TDD), including acceptance test or customer test driven development practices as found in extreme programming. It has evolved over the last few years.},
	Author = {Benno Rice, Richard Jones and Jens Engel},
	Title = {Behavior Driven Development},
	Url = {https://behave.readthedocs.io/en/stable/philosophy.html},
	Year = {2017}}

@article{Reference9,
	Abstract = {Cucumber reads executable specifications written in plain text and validates that the software does what those specifications say. The specifications consists of multiple examples, or scenarios.},
	Author = {Marit van Dijk, Aslak Hellesoy, etc.},
	Title = {Cucumber},
	Url = {https://cucumber.io/docs/guides/overview/},
	Year = {2019}}

@article{Reference10,
	Abstract = {Gherkin uses a set of special keywords to give structure and meaning to executable specifications. Each keyword is translated to many spoken languages; in this reference we’ll use English.},
	Author = {Marit van Dijk, Aslak Hellesoy, etc.},
	Title = {Gherkin Reference},
	Url = {https://cucumber.io/docs/gherkin/reference/},
	Year = {2019}}

@article{Reference11,
	Abstract = {Causal models are mathematical models representing causal relationships within an individual system or population. They facilitate inferences about causal relationships from statistical data. They can teach us a good deal about the epistemology of causation, and about the relationship between causation and probability. They have also been applied to topics of interest to philosophers, such as the logic of counterfactuals, decision theory, and the analysis of actual causation.},
	Author = {Christopher Hitchcock},
	Title = {Causal Models},
	Url = {https://plato.stanford.edu/entries/causal-models/},
	Year = {2018}}

@article{Reference12,
	Abstract = {Understanding the root cause of a defect is critical to isolating and repairing buggy behavior. We present Causal Testing, a new method of root-cause analysis that relies on the theory of counterfactual causality to identify a set of executions that likely hold key causal information necessary to understand and repair buggy behavior. Using the Defects4J benchmark, we find that Causal Testing could be applied to 71% of real-world defects, and for 77% of those, it can help developers identify the root cause of the defect. A controlled experiment with 37 developers shows that Causal Testing improves participants' ability to identify the cause of the defect from 80% of the time with standard testing tools to 86% of the time with Causal Testing. The participants report that Causal Testing provides useful information they cannot get using tools such as JUnit. Holmes, our prototype, open-source Eclipse plugin implementation of Causal Testing, is available at this http URL.},
	Author = {Brittany Johnson, Yuriy Brun, Alexandra Meliou},
	Title = {Causal Testing: Finding Defects' Root Causes},
	Pages = {123 - 146},
	Month = {Feb},
	Url = {https://plato.stanford.edu/entries/causal-models/},
	Year = {2020}}

@article{Reference13,
	Abstract = {Problem: Partial least squares (PLS), a form of structural equation modeling (SEM), can provide much value for causal inquiry in communication-related and behavioral research fields. Despite the wide availability of technical information on PLS, many behavioral and communication researchers often do not use PLS in situations in which it could provide unique theoretical insights. Moreover, complex models comprising formative (causal) and reflective (consequent) constructs are now common in behavioral research, but they are often misspecified in statistical models, resulting in erroneous tests. Key concepts: First-generation (1G) techniques, such as correlations, regressions, or difference of means tests (such as ANOVA or t-tests), offer limited modeling capabilities, particularly in terms of causal modeling. In contrast, second-generation techniques (such as covariance-based SEM or PLS) offer extensive, scalable, and flexible causal-modeling capabilities. Second-generation (2G) techniques do not invalidate the need for 1G techniques however. The key point of 2G techniques is that they are superior for the complex causal modeling that dominates recent communication and behavioral research. Key lessons: For exploratory work, or for studies that include formative constructs, PLS should be selected. For confirmatory work, either covariance-based SEM or PLS may be used. Despite claims that lower sampling requirements exist for PLS, inadequate sample sizes result in the same problems for either technique. Implications: SEM's strength is in modeling. In particular, SEM allows for complex models that include latent (unobserved) variables, formative variables, chains of effects (mediation), and multiple group comparisons of these more complex relationships.},
	Author = {Paul Benjamin Lowry; James Gaskin},
	Title = {Partial Least Squares (PLS) Structural Equation Modeling (SEM) for Building and Testing Behavioral Causal Theory: When to Choose It and How to Use It},
	Month = {April},
	Url = {https://ieeexplore.ieee.org/abstract/document/6803892/authors#authors},
	Year = {2014}}